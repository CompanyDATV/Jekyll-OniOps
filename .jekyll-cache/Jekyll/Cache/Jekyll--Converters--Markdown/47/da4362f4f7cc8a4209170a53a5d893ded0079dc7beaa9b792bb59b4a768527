I"ZR<p>Asterisk is an open source PBX system, created by Digium, more exactly, authored by Mark Spencer.
Asterisk PBX allows people to make calls to each other but also connects them with telephone services,
such as reaching the public network or VoIP services.
Asterisk is certainly the number one PBX system out there.</p>

<center> <h1 style="color:red; font-weight: bold;">Welcome to DATV</h1></center>

<p><img src="/assets/theme.png" alt="background" /></p>

<h2 id="ok-today-i-will-tutorial-about-freepbx-in-centos-7-using-docker">Ok today i will tutorial about FreePBX in CentOs 7 using Docker</h2>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gi">+ step 1: install Centos 7
</span><span class="gd">- step 2: install Docker
</span><span class="gs">! step 3: install FreePBX 15
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>First one !  require you use knowledge aout : docker and open source and cloud and so on ...
</code></pre></div></div>

<h2 id="step-1-install-centos-7"><code class="language-plaintext highlighter-rouge">Step 1 Install CentOS 7</code></h2>

<ul>
  <li>
    <p>Download iso centos 7: Link iso: <code class="language-plaintext highlighter-rouge">http://mirrors.nhanhoa.com/centos/7.9.2009/isos/x86_64</code></p>
  </li>
  <li>
    <table>
      <tbody>
        <tr>
          <td>Using vmware 16: Key</td>
          <td> </td>
          <td><code class="language-plaintext highlighter-rouge">ZF3R0-FHED2-M80TY-8QYGC-NPKYF</code></td>
        </tr>
      </tbody>
    </table>
  </li>
</ul>

<p><img src="/assets/theme1.png" alt="background" /></p>

<center> Fix as above </center>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Edit : DATE &amp; TIME as your country &lt;br&gt;
        + Network : Set IP Static not DHCP
For Example: choose Manua..
        + Network: 192.168.1.X
        + Netmask: 255.255.255.0 -&gt; /24
        + Gateway: 192.168.1.1
        + DNS1   : 8.8.8.8
        + DNS2   : 8.8.4.4
PASSWD: root : root
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    Check ip wifi: nmcli -p dev
    If your ip not change then fix as follows!
    vi /etc/sysconfig/network-scripts/ifcfg-eth0
        ^---------------------------------------------------^
        |    TYPE="Ethernet"                                |
        |    PROXY_METHOD="none"                            |
        |    BROWSER_ONLY="no"                              |
        |    BOOTPROTO="static"                             |
        |    DEFROUTE="yes"                                 |
        |    IPV4_FAILURE_FATAL="no"                        |
        |    IPV6INIT="yes"                                 |
        |    IPV6_AUTOCONF="yes"                            |
        |    IPV6_DEFROUTE="yes"                            |
        |    IPV6_FAILURE_FATAL="no"                        |
        |    IPV6_ADDR_GEN_MODE="stable-privacy"            |
        |    NAME="ens33"                                   |
        |    UUID="1eff6d2b-3fd6-405b-9e78-cafb7fbc2e34"    |
        |    DEVICE="ens33"                                 |
        |    ONBOOT="yes"                                   |
        |    IPADDR=192.168.1.X                             |
        |    GATEWAY=192.168.1.1                            |
        |    NETMASK=255.255.255.0                          |
        |    DNS1=8.8.8.8                                   |
        *---------------------------------------------------*
    After type: esc :wq -&gt; Save file!!!

Edit vmnet8 ip addr : 192.168.1.X – default gateway : 192.168.1.1

    +&gt;Install some as:
        yum install net-tools
        yum install telnet -y
        yum install openssh
        systemctl status firewalld
        firewall-cmd –add-service=ssh –permanent
        firewall-cmd –reload
        firewall-cmd –list-all
        systemctl enable sshd.service
        systemctl start sshd.service

</code></pre></div></div>

<h2 id="step-2-installer-docker-container-in-centos-7"><code class="language-plaintext highlighter-rouge">Step 2 Installer Docker Container in CentOS 7</code></h2>

<p>But first, let’s update the package database:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">sudo</span> <span class="nx">yum</span> <span class="nx">check</span><span class="o">-</span><span class="nx">update</span>
</code></pre></div></div>

<p>Now run this command. It will add the official Docker repository, download the latest version of Docker, and install it:</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">yum</span> <span class="nt">-y</span> <span class="nt">install</span> <span class="nt">yum-utils</span> <span class="nt">device-mapper-persistent-data</span> <span class="nt">lvm2</span>
</code></pre></div></div>

<p>After download Docker from source packet!</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">curl -fsSL https://get.docker.com/ | sh
</span></code></pre></div></div>

<p>After installation has completed, start the Docker daemon:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># sudo systemctl status/start/enable/stop docker
</code></pre></div></div>

<p>Step 4: If you want to avoid typing sudo whenever you run the docker command, add your username to the docker group:</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">#</span> sudo usermod -aG docker $(whoami)
<span class="err">#</span> sudo usermod -aG docker username
</code></pre></div></div>

<ul>
  <li>Let’s it install Docker-compose in CentOs 7</li>
</ul>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Step 1: <span class="nb">sudo </span>curl <span class="nt">-L</span> <span class="s2">"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-</span><span class="si">$(</span><span class="nb">uname</span> <span class="nt">-s</span><span class="si">)</span><span class="s2">-</span><span class="si">$(</span><span class="nb">uname</span> <span class="nt">-m</span><span class="si">)</span><span class="s2">"</span> <span class="nt">-o</span> /usr/local/bin/docker-compose
</code></pre></div></div>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Step 2: <span class="nb">sudo chmod</span> +x /usr/local/bin/docker-compose
</code></pre></div></div>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Step 3: docker-compose <span class="nt">--version</span>
</code></pre></div></div>

<h2 id="step-3-install-freepbx"><code class="language-plaintext highlighter-rouge">Step 3 Install FreePBX</code></h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Open terimal in CentOS 7
# Type command line:
    Docker pull tiredofit/freepbx
    After build images from packet brove: -&gt; check images || docker images
    I see: ----&gt;
    REPOSITORY          TAG       IMAGE ID       CREATED        SIZE
    tiredofit/freepbx   latest    e98ede842e6d   7 months ago   2.05GB

    after : build images to container linux:
    docker run --name freepbx1 -v /docker-volumes/api/home/asterisk:/var/spool/asterisk \
    --net=host -e HTTP_PORT=8080 -e HTTPS_PORT=1443 --restart=always -itd tiredofit/freepbx

    with:
        --name : your name container
        -- \ is space
        -e : environment
        --restart=always -&gt; after reboot then automatic restart
        -itd: -i starts an interactive session and \
              -t emulates a tty. \
              -d tells Docker to detach and run in the background.
    Edit file config avoid conflict:
        vim /etc/apache2/ports.conf

            listen 8080
            &lt;ifModule ssl_module&gt;
                listen 1443
            &lt;/IfModule&gt;
            &lt;ifModule mod_gnutls.c&gt;
                listen 1443
            &lt;/IfModule&gt;

        After reset httpd:
            Command line: /etc/init.d/apache2 restart
        + complement:
            apt-get install pkg-config
            sudo apt-get install -y icu-devtools
            sudo apt-get install -y libicu-dev
            sudo apt-get install -y pkgconf
            fwconsole ma upgradeall
        	fwconsole ma download cel
        	fwconsole ma install cel
    Execute FreePBX:
    Type: ip:8080/admin/config.php
</code></pre></div></div>

<p>Note that! <br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- Open port:
    tcp: 22, 80, 443, 1443, 5060, 5160, 8089, 8002
    udp: 10000 - 60000, 5060, 55000, 1194, 5160
</code></pre></div></div>

<center> <h1 style="color:orange;">Practice Now</h1> </center>

<ul>
  <li>Install Module Admin:
```diff
!   ADMIN
        REST API
        CALLERID LOOKUP
        BACKUP&amp;RESTORE
        ASTERISK CLI
    <ul>
      <li>APPLICATION
    IVR
    ANNOUCEMENTS
    QUEUES
    RING GROUPS
    CALENDAR
    TIME CONDITION
    fwconsole ma upgradeall
    fwconsole ma download cel
    fwconsole ma install cel
    PBX API
    ASTERISK API
    MISC APPLICATION
    MISC DESTINATION
    SET CALLERID (CEL)
    WAKE UP CALLS</li>
      <li>SETTING
    FILE STORE
    ASTERISK REST INTERFACE USER (ARI)
@   CONNECTIVITY
    WEBRTC PHONE
```</li>
    </ul>
  </li>
</ul>

<center> <h1 style="color:red; font-weight: bold;">Athor with docker-compose and Dockerfile</h1></center>

<p>Ok let’s it</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Step 1: Install Centos 7 in Vmware os Using VPS CentOs 7
</code></pre></div></div>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Step 2: git clone https://github.com/ElsagaTech/Voip.git
</code></pre></div></div>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Step 3: <span class="nb">cd </span>Voip
</code></pre></div></div>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Step 4: docker-compose up <span class="nt">-d</span> <span class="nt">--build</span>
</code></pre></div></div>

<p>Now you look!</p>

<ul>
  <li>command line: docker logs freepbbx-app</li>
</ul>

<p>==&gt; <code class="language-plaintext highlighter-rouge">logs</code></p>

<h1 id="note-that">Note that:</h1>

<h2 id="file-moulesh">File moule.sh</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>install module and chmod key
</code></pre></div></div>

<p>I look two key :</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>api_oauth_public.key
api_oauth.key
</code></pre></div></div>

<h2 id="file-usersh">File user.sh</h2>

<h2 id="using-curl-bypass-create-information">Using Curl bypass create information!</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    Create admin user

    curl -X POST \
    'http://192.168.1.25:8080/admin/config.php' \
    --data 'action=setup_admin', \
    --data 'username=admin', \
    --data 'password1=admin', \
    --data 'password2=admin', \
    --data 'email=vudat412@gmail.com', \
    --data 'system_ident=VoIP+Server', \
    --data 'auto_module_updates=enabled', \
    --data 'auto_module_security_updates=enabled', \
    --data 'unsigned_module_emails=enabled', \
    --data 'update_every=saturday', \
    --data 'update_period=4to8' \
    -c /var/www/html/cookieLogin.json
</code></pre></div></div>

<ul>
  <li>
    <p>File cookieLogin.json contains cookie information!</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  Create Languages

  curl -X POST \
  'http://192.168.1.25:8080/admin/config.php' \
  --data 'username=admin', \
  --data 'password=admin', \
  --data 'oobeSoundLang=en', \
  --data 'oobeGuiLang=en_US'
</code></pre></div>    </div>
  </li>
  <li>
    <p>Create Api Token Graphql</p>

    <div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">To</span> <span class="n">create</span> <span class="no">Api</span> <span class="no">Token</span> <span class="no">OAUTH</span> <span class="mi">2</span> <span class="n">you</span> <span class="n">need</span> <span class="mi">2</span> <span class="ss">factors: </span><span class="no">ClientID</span> <span class="n">and</span> <span class="no">ClientSC</span>
<span class="no">Ok</span><span class="o">!</span> <span class="no">To</span> <span class="n">generate</span> <span class="mi">2</span> <span class="n">authentication</span> <span class="n">keys</span> <span class="n">we</span> <span class="n">have</span> <span class="n">to</span> <span class="n">get</span> <span class="n">the</span> <span class="n">returned</span> <span class="n">cookie</span> <span class="n">data</span> <span class="n">to</span> <span class="n">bypass</span> <span class="n">login</span>
<span class="no">Look</span><span class="o">!</span>

<span class="c1"># cut hash #</span>
<span class="n">cookie</span><span class="o">=</span><span class="s2">"$(curl -X POST -v --silent http://192.168.1.25:8080/admin/config.php \
-d 'username=admin&amp;password=admin&amp;oobeSoundLang=en&amp;oobeGuiLang=en_US' --stderr - | grep expire | grep -oP 'PHPSESSID=([a-zA-Z0-90]+)' | awk -F "</span><span class="o">=</span><span class="s2">" '{print $2}')"</span>

<span class="no">You</span> <span class="ss">see: </span><span class="n">curl</span> <span class="no">POST</span> <span class="o">--&gt;</span> <span class="n">cookie</span> <span class="n">after</span> <span class="n">cut</span> <span class="nb">hash</span> <span class="o">|</span> <span class="no">PHPSESSID</span><span class="o">=</span><span class="p">?</span><span class="n">key?</span>
<span class="n">we</span> <span class="n">have</span> <span class="n">to</span> <span class="n">cut</span> <span class="n">it</span><span class="o">|</span> <span class="p">([</span><span class="n">a</span><span class="o">-</span><span class="n">zA</span><span class="o">-</span><span class="no">Z0</span><span class="o">-</span><span class="mi">90</span><span class="p">]</span><span class="o">+</span><span class="p">)</span> <span class="o">|</span> <span class="n">using</span> <span class="sb">`awk`</span> <span class="n">because</span>  <span class="no">PHPSESSID</span><span class="o">=</span><span class="p">?</span><span class="n">key?</span> <span class="s2">"="</span>
<span class="n">awk</span> <span class="o">-</span><span class="no">F</span> <span class="s2">"="</span> <span class="s1">'{print $2}'</span><span class="p">)</span><span class="s2">" | exacly

# Okey after cookie we will get that cookie to bypass and create an api through the cookie that we can req #
curl -X POST \
'http://192.168.1.25:8080/admin/ajax.php?module=api&amp;command=add_application' \
--header 'Referer: http://192.168.1.25:8080/admin/config.php?display=api' \
--cookie "</span><span class="no">PHPSESSID</span><span class="o">=</span><span class="vg">$cookie</span><span class="s2">" \
--data 'type=client_credentials', \
--data 'name=API', \
--data 'description=GRAPH+API', \
--data 'allowed_scopes=gql', \
--data 'website=&amp;redirect=&amp;&amp;user=' &gt; /var/www/html/token.json

# we get the key file that stores the api_application information about we req,
# Now we will cut those two keys and assign them to a variable, setting the value with the name clientID and clientSC.

clientID="</span><span class="err">$</span><span class="p">(</span><span class="n">awk</span> <span class="o">-</span><span class="no">F</span> <span class="s2">":"</span> <span class="s1">'{print $5}'</span> <span class="o">/</span><span class="n">var</span><span class="o">/</span><span class="n">www</span><span class="o">/</span><span class="n">html</span><span class="o">/</span><span class="n">token</span><span class="p">.</span><span class="nf">json</span> <span class="o">|</span> <span class="n">cut</span> <span class="o">-</span><span class="n">d</span><span class="p">,</span> <span class="o">-</span><span class="n">f1</span> <span class="o">|</span> <span class="n">cut</span> <span class="o">-</span><span class="n">d</span> <span class="s1">'"'</span> <span class="o">-</span><span class="n">f2</span><span class="p">)</span><span class="s2">"

## and

clientSC="</span><span class="err">$</span><span class="p">(</span><span class="n">awk</span> <span class="o">-</span><span class="no">F</span> <span class="s2">":"</span> <span class="s1">'{print $6}'</span> <span class="o">/</span><span class="n">var</span><span class="o">/</span><span class="n">www</span><span class="o">/</span><span class="n">html</span><span class="o">/</span><span class="n">token</span><span class="p">.</span><span class="nf">json</span> <span class="o">|</span> <span class="n">cut</span> <span class="o">-</span><span class="n">d</span><span class="p">,</span> <span class="o">-</span><span class="n">f1</span> <span class="o">|</span> <span class="n">cut</span> <span class="o">-</span><span class="n">d</span> <span class="s1">'"'</span> <span class="o">-</span><span class="n">f2</span><span class="p">)</span><span class="s2">"

# Now we will use these 2 variables to attach values to curl and ask them to return us a token

curl -X POST \
-H "</span><span class="no">Accept</span><span class="p">:</span><span class="o">*</span><span class="sr">/*" \
-H "Content-Type: application/</span><span class="n">json</span><span class="s2">" \
-d '{"</span><span class="n">client_id</span><span class="s2">":"</span><span class="s1">'"$clientID"'</span><span class="s2">","</span><span class="n">client_secret</span><span class="s2">":"</span><span class="s1">'"$clientSC"'</span><span class="s2">","</span><span class="n">grant_type</span><span class="s2">":"</span><span class="s1">'"client_credentials"'</span><span class="s2">","</span><span class="n">scope</span><span class="s2">":"</span><span class="s1">'"gql"'</span><span class="s2">"}' \
http://192.168.1.25:8080/admin/api/api/token &gt;&gt; /var/www/html/tokenAPI.json

Now we have finished creating Token API
</span></code></pre></div>    </div>
  </li>
</ul>

<h2 id="using-insert-dbs-create-information">Using Insert DBS create information!</h2>

<ul>
  <li>
    <p>Create in DBS</p>

    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
        <span class="c"># Tao nguoi dung qua co so du lieu</span>

        <span class="nv">password</span><span class="o">=</span><span class="s2">"</span><span class="sb">`</span><span class="nb">echo</span> <span class="nt">-n</span> <span class="s1">'admin'</span>|sha1sum|cut <span class="nt">-d</span> <span class="s1">' '</span> <span class="nt">-f</span> 1<span class="sb">`</span><span class="s2">"</span>
        mysql <span class="nt">-D</span> asterisk <span class="nt">-e</span> <span class="s2">"INSERT INTO ampusers (username,password_sha1,sections) VALUES ('admin','</span><span class="nv">$password</span><span class="s2">','*');"</span>

        <span class="c"># tao api thong qua co so du lieu</span>
        <span class="nv">passwordSC</span><span class="o">=</span><span class="s2">"</span><span class="sb">`</span><span class="nb">echo</span> <span class="s1">'adminSC'</span>|sha256sum| <span class="nb">awk</span> <span class="s1">'{print $1}'</span><span class="sb">`</span><span class="s2">"</span>
        mysql <span class="nt">-D</span> asterisk <span class="nt">-e</span> <span class="s2">"INSERT INTO api_applications (owner,name,description,grant_type,client_id,client_secret,redirect_uri,website,algo,allowed_scopes) VALUES (NULL,'API','GRAPH API','client_credentials','</span><span class="nv">$passwordSC</span><span class="s2">',SHA2('</span><span class="nv">$passwordSC</span><span class="s2">', 256),'','','sha256','gql');"</span>
        <span class="c"># lấy key client_secret trong dbs</span>
        <span class="nv">clientsecret</span><span class="o">=</span><span class="s2">"</span><span class="sb">`</span>mysql <span class="nt">-ND</span> asterisk <span class="nt">-e</span> <span class="s2">"select client_secret from api_applications where name = 'API' and allowed_scopes = 'gql';"</span><span class="sb">`</span><span class="s2">"</span>

        ... To be continued ...
    <span class="sb">```</span>

Folder : certs, data, db, dbbackup, logs
</code></pre></div>    </div>
  </li>
</ul>
:ET